10
a <- makeVector( 1:5 )
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector( 1:5 )
a
a <- makeVector(1:5)
a
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- solve
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix(1:4, 2, 2)
a <- makeCacheMatrix(1:4)
a
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a
cacheSolve(a)
b <- makeVector( rep(6:10,2) )
b
cachemean(b)
ab <- a + b
b <- makeCacheMatrix( rep(6:10,2) )
cacheSolve(b)
b <- makeCacheMatrix(matrix(1:8, 3, 2))
b
cacheSolve(b)
a <- makeVector(1:5)
a$get()
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(1:8, 3, 2))
b$get()
b <- makeCacheMatrix(matrix(1:8, 2, 2))
b$get()
cacheSolve(b)
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai2 = cacheSolve(am)
a %*% ai2
a <- makeVector(1:5)
a$get()
cachemean(a)
b <- makeVector( rep(6:10,2) )
b$get()
cachemean(b)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- rbinom(10, 10, 0.5)
x2 <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
$by.total
$by.total
$by.self
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$by.total
set.seed(1)
rpois(5, 2)
lm(y ~ x1 + x2)
$by.total
by.total
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
makeCacheMatrix <-function(m = matrix()) {
solveCache <- NULL
set <- function(value) {
m <<- value
solveCache <<- NULL
}
get <- function() {
return(m)
}
setSolveCache <- function(value) {
solveCache <<- value
}
getSolveCache <- function()
{
return(solveCache)
}
list(set = set, get = get,
setSolveCache = setSolveCache,
getSolveCache = getSolveCache)
}
## Return a matrix that is the inverse cached matrix of 'x'
cacheSolve <-function(x, ...) {
result <- x$getSolveCache()
if(!is.null(result)) {
return(result)
}
value <- x$get()
result <- solve(value, ...)
x$setSolveCache(result)
return(result)
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(myinv) inv <<- myinv
getinv <- function() inv
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve
## should retrieve the inverse from the cache
cacheSolve <- function(x,...){
inv0 <-x$getinv()
if(!is.null(inv0)){
message("getting cached inversed matrix")
return(inv0)
}
data <- x$get()
if(dim(data)[1] != dim(data)[2]) stop("matrix must be square!\n")
inv0 <- solve(data)
x$setinv(inv0)
inv0
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## Test Cases:
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
getting cached data
ai %*% a
a %*% ai2
setwd("D:/Online Courses/Coursera/Data Science/3. Getting and Cleaning Data/Lab/Examples")
getwd()
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv", method = "")
dateDownloaded <- date()
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv")
dateDownloaded <- date()
dateDownloaded
cameraData <- read.csv("./data/cameras.csv")
head(cameraData)
cameraData <- read.csv("./data/cameras.csv")
head(cameraData)
cameraData <- read.table("./data/cameras.csv", sep = ",", header = TRUE)
head(cameraData)
setwd("D:/Online Courses/Coursera/Data Science/3. Getting and Cleaning Data/Lab/Examples/Week 1")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
library()
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library("XML")
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
scores
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y=="a",]
DT[c(2,3)]
DT[,c(2,3)]
{
x = 1
y = 2
}
k = {print(10); 5}
DT[,list(mean(x),sum(z))]
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "lab.csv")
data <- read.table("./lab.csv", sep = ",", header = TRUE)
head(data)
