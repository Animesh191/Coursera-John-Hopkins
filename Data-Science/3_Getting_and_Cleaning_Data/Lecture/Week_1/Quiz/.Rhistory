a <- makeVector(1:5)
a$get()
cachemean(a)
b <- makeVector( rep(6:10,2) )
b$get()
cachemean(b)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- rbinom(10, 10, 0.5)
x2 <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
$by.total
$by.total
$by.self
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$by.total
set.seed(1)
rpois(5, 2)
lm(y ~ x1 + x2)
$by.total
by.total
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
makeCacheMatrix <-function(m = matrix()) {
solveCache <- NULL
set <- function(value) {
m <<- value
solveCache <<- NULL
}
get <- function() {
return(m)
}
setSolveCache <- function(value) {
solveCache <<- value
}
getSolveCache <- function()
{
return(solveCache)
}
list(set = set, get = get,
setSolveCache = setSolveCache,
getSolveCache = getSolveCache)
}
## Return a matrix that is the inverse cached matrix of 'x'
cacheSolve <-function(x, ...) {
result <- x$getSolveCache()
if(!is.null(result)) {
return(result)
}
value <- x$get()
result <- solve(value, ...)
x$setSolveCache(result)
return(result)
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(myinv) inv <<- myinv
getinv <- function() inv
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve
## should retrieve the inverse from the cache
cacheSolve <- function(x,...){
inv0 <-x$getinv()
if(!is.null(inv0)){
message("getting cached inversed matrix")
return(inv0)
}
data <- x$get()
if(dim(data)[1] != dim(data)[2]) stop("matrix must be square!\n")
inv0 <- solve(data)
x$setinv(inv0)
inv0
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## Test Cases:
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
getting cached data
ai %*% a
a %*% ai2
setwd("D:/Online Courses/Coursera/Data Science/3. Getting and Cleaning Data/Lecture/Quiz/Week 1")
data <- read.table("./lab.csv", sep = ",", header = TRUE)
head(data)
data[data$VAL >= 14]
data[data$VAL > 14]
X <- data.table(data)
library(data.table)
X <- data.table(data)
x
X = data.table(data)
x
data
data[,data$VAL >= 14]
x <- data[data$VAL]
x <- data[data$VAL,]
x
x <- data[data$VAL >= 14,]
x
nrow(x)
ncol(x)
x <- data[[VAL]]
x <- data[["VAL"]]
x
a <- nrow(x >= 14)
a
a <- nrow(is.na(x) >= 14)
a
a <- ncol(is.na(x) >= 14)
a
a <- nrow(x, na.rm= T)
a <- nrow(x, na.rm= TRUE)
a <- count(x, na.rm= TRUE)
x <- data[[complete.cases("VAL")]]
x
x <- data[["VAL"]]
a <- complete.cases(x)
a
a <- is.na(x)
a
data[a,]
x <- na.omit(data[["VAL"]])
x
x <- data[["VAL"]]
a <- na.omit(x)
a
nrow(a >= 14)
x <- data[["VAL"]]
x
x <- data[complete.cases("VAL"),]
x
x <- complete.cases(data)
x
x <- data[complete.cases(data),]
x
x <- data[,complete.cases(data)]
x
x <- data[[data$VAL >= 14]]
x <- data[data$VAL >= 14,]
x
x <- data[complete.cases(["VAL"])]
x <- complete.cases(data[["VAL"]])
x
data[[x]]
data[x]
which(data$VAL >= 14)
data <- read.table("./lab.csv", sep = ",", header = TRUE)
head(data)
which(data$VAL >= 14)
data <- read.table("./lab.csv", sep = ",", header = TRUE,  colClasses = "character")
head(data)
which(data$VAL >= 14)
which(data$VAL >= 14, na.rm = TRUE)
data <- read.table("./lab.csv", sep = ",", header = TRUE)
head(data)
which(data$VAL > 13)
count(data, vars = "VAL")
library(plyr)
library(plyr)
data <- read.table("./lab.csv", sep = ",", header = TRUE, na.rm= TRUE)
head(data)
x <- data[["VAL"]]
x
a <- as.numeric(x, na.rm= TRUE)
a
x <- data[!is.na(data$VAL),]
data <- read.table("./lab.csv", sep = ",", header = TRUE)
x <- data[!is.na(data$VAL),]
x
a <- x[["VAL"]]
a
nrow(a >= 14)
ncol(a >= 14)
sum(a >= 14)
length(a >= 14)
table(a)
sum(a >= 24)
library(xlsx)
install.packages("xlsx")
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "lab2.xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "lab2.xlsx")
xdata <- read.xlsx("./lab2.xlsx", sep = ",", header = TRUE)
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
xdata
x <- xdata[18:23, 7:15]
x
dat <- xdata[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
head(xdata)
dat <- xdata[18:23, 7:15]
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat <- xdata[18:23, 7:15]
dat
dat <- xdata[c(18:23), c(7:15)]
dat
dat <- xdata[c(17:23), c(7:15)]
dat
dat <- xdata[c(17:22), c(7:15)]
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- xdata[17:22, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat <- xdata[c(17:22), c(7:15)]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE, colClasses = "character")
dat <- xdata[c(17:22), c(7:15)]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- as.numeric(xdata[c(17:22), c(7:15)])
as.numeric(sum(dat$Zip*dat$Ext,na.rm=T) )
sum(dat$Zip*dat$Ext)
dat <- xdata[c(17:22), c(7:15)]
dat
dat1 <- xdata[c(17:22), c(7:15)]
dat <- na.omit(dat1)
dat
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat1 <- xdata[c(17:22), c(7:15)]
dat <- na.omit(dat1)
dat
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat1 <- xdata[c(17:22), c(7:15)]
dat <- dat1[!is.na(dat1),]
dat
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat1 <- xdata[c(17:22), c(7:15)]
dat <- dat1[,!is.na(dat1)]
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat1 <- xdata[c(17:22), c(7:15)]
dat <- dat1[!is.na(dat1)]
dat
xdata <- read.xlsx("./lab2.xlsx", sheetIndex = 1, header = TRUE)
dat1 <- xdata[c(17:22), c(7:15)]
dat <- !is.na(dat1)
dat
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("./lab2.xlsx", sheetIndex = 1, colIndex = ColIndex,
rowIndex = rowIndex)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("./lab2.xlsx", sheetIndex = 1, colIndex = colIndex,
rowIndex = rowIndex)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file,useInternal=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "lab3.csv")
library(data.table)
fread("lab3.csv")
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT <- fread("lab3.csv")
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time()
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
start.time <- sys.time()
start.time <- Sys.time()
start.time
start.time <- Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
start.time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
start.time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
start.time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
DT <- fread("lab3.csv")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(fread("lab3.csv"))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(fread("lab3.csv"))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(fread("lab3.csv"))
DT[,mean(pwgtp15),by=SEX]
system.time(fread("lab3.csv"))
mean(DT$pwgtp15,by=DT$SEX)
system.time(fread("lab3.csv"))
