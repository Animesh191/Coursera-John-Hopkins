y
dir()
ls()
x <- read.csv("001.csv")
library(datasets)
data(iris)
iris
x <- split(iris, iris$Species)
x
lapply(x, function(x) mean(x[,c("Sepal.Length")]))
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
15.10000 - 26.66364
debug(ls)
ls
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls
x <- matrix(1:4, 2, 2)
x
solve(x)
makeCacheMatrix
makeVector
function(x = numeric())
10
cachemean
function(x, ...)
10
a <- makeVector( 1:5 )
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector( 1:5 )
a
a <- makeVector(1:5)
a
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- solve
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix(1:4, 2, 2)
a <- makeCacheMatrix(1:4)
a
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a
cacheSolve(a)
b <- makeVector( rep(6:10,2) )
b
cachemean(b)
ab <- a + b
b <- makeCacheMatrix( rep(6:10,2) )
cacheSolve(b)
b <- makeCacheMatrix(matrix(1:8, 3, 2))
b
cacheSolve(b)
a <- makeVector(1:5)
a$get()
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(1:8, 3, 2))
b$get()
b <- makeCacheMatrix(matrix(1:8, 2, 2))
b$get()
cacheSolve(b)
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai2 = cacheSolve(am)
a %*% ai2
a <- makeVector(1:5)
a$get()
cachemean(a)
b <- makeVector( rep(6:10,2) )
b$get()
cachemean(b)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- rbinom(10, 10, 0.5)
x2 <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
$by.total
$by.total
$by.self
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$by.total
set.seed(1)
rpois(5, 2)
lm(y ~ x1 + x2)
$by.total
by.total
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
makeCacheMatrix <-function(m = matrix()) {
solveCache <- NULL
set <- function(value) {
m <<- value
solveCache <<- NULL
}
get <- function() {
return(m)
}
setSolveCache <- function(value) {
solveCache <<- value
}
getSolveCache <- function()
{
return(solveCache)
}
list(set = set, get = get,
setSolveCache = setSolveCache,
getSolveCache = getSolveCache)
}
## Return a matrix that is the inverse cached matrix of 'x'
cacheSolve <-function(x, ...) {
result <- x$getSolveCache()
if(!is.null(result)) {
return(result)
}
value <- x$get()
result <- solve(value, ...)
x$setSolveCache(result)
return(result)
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(myinv) inv <<- myinv
getinv <- function() inv
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve
## should retrieve the inverse from the cache
cacheSolve <- function(x,...){
inv0 <-x$getinv()
if(!is.null(inv0)){
message("getting cached inversed matrix")
return(inv0)
}
data <- x$get()
if(dim(data)[1] != dim(data)[2]) stop("matrix must be square!\n")
inv0 <- solve(data)
x$setinv(inv0)
inv0
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## Test Cases:
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
getting cached data
ai %*% a
a %*% ai2
setwd("D:/Online Courses/Coursera/Data Science/3. Getting and Cleaning Data/Lecture/Examples/Week 2")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
pg1
pg2
