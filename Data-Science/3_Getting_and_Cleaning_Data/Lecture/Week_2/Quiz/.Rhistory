a$get()
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(2,0,0,2),nrow=2,ncol=2,byrow=T)
a
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(1:8, 3, 2))
b$get()
b <- makeCacheMatrix(matrix(1:8, 2, 2))
b$get()
cacheSolve(b)
a = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai = cacheSolve(makeCacheMatrix(a))
ai
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
ai %*% a
a %*% ai2
a = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai2 = cacheSolve(am)
a %*% ai2
a <- makeVector(1:5)
a$get()
cachemean(a)
b <- makeVector( rep(6:10,2) )
b$get()
cachemean(b)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- rbinom(10, 10, 0.5)
x2 <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
$by.total
$by.total
$by.self
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
$by.total
set.seed(1)
rpois(5, 2)
lm(y ~ x1 + x2)
$by.total
by.total
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
makeCacheMatrix <-function(m = matrix()) {
solveCache <- NULL
set <- function(value) {
m <<- value
solveCache <<- NULL
}
get <- function() {
return(m)
}
setSolveCache <- function(value) {
solveCache <<- value
}
getSolveCache <- function()
{
return(solveCache)
}
list(set = set, get = get,
setSolveCache = setSolveCache,
getSolveCache = getSolveCache)
}
## Return a matrix that is the inverse cached matrix of 'x'
cacheSolve <-function(x, ...) {
result <- x$getSolveCache()
if(!is.null(result)) {
return(result)
}
value <- x$get()
result <- solve(value, ...)
x$setSolveCache(result)
return(result)
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(myinv) inv <<- myinv
getinv <- function() inv
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve
## should retrieve the inverse from the cache
cacheSolve <- function(x,...){
inv0 <-x$getinv()
if(!is.null(inv0)){
message("getting cached inversed matrix")
return(inv0)
}
data <- x$get()
if(dim(data)[1] != dim(data)[2]) stop("matrix must be square!\n")
inv0 <- solve(data)
x$setinv(inv0)
inv0
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
##  Catching the Inverse of the Matrix
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to:
##  1. set the value of the matrix
##  2. get the value of the matrix
##  3. set the value of the inverse
##  4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## Test Cases:
a <- makeCacheMatrix(matrix(1:4, 2, 2))
a$get()
cacheSolve(a)
b <- makeCacheMatrix(matrix(4:8, 2, 2))
b$get()
cacheSolve(b)
c = matrix(c(1,-0.25,-0.25,1),nrow=2,ncol=2,byrow=T)
ci = cacheSolve(makeCacheMatrix(a))
ci
d = matrix(c(4,7,2,6),nrow=2,ncol=2,byrow=T)
di = cacheSolve(makeCacheMatrix(a))
di
ai1 = cacheSolve(makeCacheMatrix(a))
am = makeCacheMatrix(a)
ai = cacheSolve(am)
ai2 = cacheSolve(am)
getting cached data
ai %*% a
a %*% ai2
setwd("D:/Online Courses/Coursera/Data Science/3. Getting and Cleaning Data/Lecture/Quiz/Week 2")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(con[10])
nchar(con)
nchar(htmlCode)
nchar(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
con = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
htmlCode = readLines(con)
close(con)
htmlCode
install.packages("httr")
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key="b0824288======cb85",secret = "6ded3964b70========85e8ae09cae")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key="c2c666a842ca53949bc6",secret = "5f4cc856c1842312215b19de2e38d880321b2fb3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp = oauth_app("github",
key="c2c666a842ca53949bc6",secret="5f4cc856c1842312215b19de2e38d880321b2fb3")
github <- oauth_endpoints("github")
myapp <- oauth_app("github",key="c2c666a842ca53949bc6",secret = "5f4cc856c1842312215b19de2e38d880321b2fb3")
github_token <- oauth2.0_token(github, myapp)
library(httr)
github <- oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github",key="c2c666a842ca53949bc6",secret = "5f4cc856c1842312215b19de2e38d880321b2fb3")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(github, myapp)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github",key="c2c666a842ca53949bc6",secret = "5f4cc856c1842312215b19de2e38d880321b2fb3")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
json2[1,]
data <- read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
data <- read.fwf("getdata-wksst8110.for")
data <- read.fwf("getdata-wksst8110.for")
ans <- read.table('getdata-wksst8110.for', header=TRUE, strip.white=TRUE)
ans <- read.table("getdata-wksst8110.for", header=TRUE, strip.white=TRUE)
ans <- read.fwf('getdata-wksst8110.for',width=c(8, 3,4, 5), header = T)
ans <- read.fwf('getdata-wksst8110.for',width=c(8, 3,4, 5))
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(8, 3, 5, 6))
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(8, 3, 5, 6, 4, 2, 8, 7))
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(8, 3, 5, 6, 4, 2, 8, 7), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(9, 3, 4, 5, 6, 5, 6, 5, 6), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(11, 3, 4, 5, 6, 5, 6, 5, 6), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(12, 3, 4, 5, 6, 5, 6, 5, 6), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(7, 3, 4, 5, 6, 5, 6, 5, 6), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(7, 3, 4, 6, 4, 11), header = TRUE
, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for'c(7,5,-2,1,1,1,1,1,1), header=TRUE, strip.white=TRUE)
head(ans)
sum(ans[4])
sum(ans[[4]])
shortlist <- ans[4]
length(shortlist)
table(ans)
sum(shortlist)
shortlist <- as.numeric(ans[4])
sum(shortlist)
shortlist <- as.numeric(ans[4], is.na = T)
sum(shortlist)
shortlist <- as.numeric(ans[[4]], is.na = T)
sum(shortlist)
shortlist <- as.numeric(ans[[4]])
sum(shortlist)
ans <- read.fwf('getdata-wksst8110.for'c(7,5,-2,1,1,1,1,1,1), header=TRUE, strip.white=TRUE)
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(12, 7,4, 9,4, 9,4, 9,4))
head(ans)
ans <- read.fwf('getdata-wksst8110.for',width=c(12, 7,4, 9,4, 9,4, 9,4), skip = 4)
head(ans)
shortlist <- as.numeric(ans[4])
sum(shortlist)
shortlist <- ans[4]
sum(shortlist)
ans <- read.csv('getdata-data-ss06pid.csv',, header = TRUE, sep = ",", dbname = tempfile(), drv = "SQLite")
ans <- read.csv('getdata-data-ss06pid.csv', header = TRUE, sep = ",", dbname = tempfile(), drv = "SQLite")
ans <- read.csv('getdata-data-ss06pid.csv', header = TRUE, sep = ",")
head(ans)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(RMySQL)
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
acs <- read.csv('getdata-data-ss06pid.csv', header = TRUE, sep = ",")
head(ans)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct pwgtp1 from acs")
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select distinct pwgtp1 from acs")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github",key="c2c666a842ca53949bc6",secret = "5f4cc856c1842312215b19de2e38d880321b2fb3")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json2
